include "std";

export enum STATE { opened, concluded }

export ledger auction_state: Cell<STATE>;
export ledger item_description: Cell<Opaque<"string">>;
export ledger minimum_bid: Cell<Uint<32>>;
export ledger bid_increment: Cell<Uint<32>>;
export ledger current_bid: Cell<Maybe<Uint<32>>>;
export ledger current_bidder: Cell<Maybe<Bytes<32>>>;
export ledger reserve_price: Cell<Uint<32>>;
export ledger item_seller: Cell<Bytes<32>>;

constructor(_item_description: Opaque<"string">, _minimum_bid: Uint<32>, _bid_increment: Uint<32>, _reserve_price: Uint<32>) {
    assert _reserve_price >= _minimum_bid 
        "The reserve price should be equal to or greater than the minimum bid";
    
    auction_state = STATE.opened;
    current_bid = none<Uint<32>>();
    current_bidder = none<Bytes<32>>();
    item_description = _item_description;
    minimum_bid = _minimum_bid;    
    bid_increment = _bid_increment;
    // Q: How can we keep this next one private???
    reserve_price = _reserve_price;
    item_seller = public_key(local_secret_key());
}

witness local_secret_key(): Bytes<32>;

export circuit place_bid(new_bid: Uint<32>): Void {
    assert auction_state == STATE.opened
        "Attempted to bid on a concluded auction";

    const bidder_pub_key = public_key(local_secret_key());

    assert item_seller != bidder_pub_key
        "Can't place a bid as the auction seller";

    if (current_bid.is_some) {
        assert new_bid >= (current_bid.value + bid_increment)
            "The bid should be equal to or greater than the 'current bid + bid increment'";
    } else {
        assert new_bid >= minimum_bid
            "The bid should be equal to or greater than the minimum bid";
    }
    
    // Q: How will this be implemented actually??
    //assert birthDateFromVC >= 18
    //    "The bidder's age must be equal to or greater than 18"

    current_bid = some<Uint<32>>(new_bid);
    current_bidder = some<Bytes<32>>(bidder_pub_key);

    // Q: How do we implement this knowing tht the reserve price should be private?
    if (new_bid >= reserve_price)
        auction_state = STATE.concluded;
}

export circuit conclude_auction(): Void {
    assert auction_state == STATE.opened
        "Attempted to conclude an auction that has already been concluded";

    assert current_bid.is_some
        "Failed to conclude auction because no bids were placed";

    assert item_seller == public_key(local_secret_key())
        "Only the seller of the item can conclude the auction";
    
    auction_state = STATE.concluded;
}

export circuit public_key(sk: Bytes<32>): Bytes<32> {
    return persistent_hash<Vector<2, Bytes<32>>>([pad(32, "auction:participant:pk"), sk]);
}

